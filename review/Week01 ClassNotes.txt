Week01 Review:
	Topics:
		Core javaScript
		
		Asynchronious Programming:
				Promises
				Async & Await

		AI Tools:
			Perplexity
			Tabnine

Interpreted Programming Language: JavaScript, Python

        Dynamically Typed

        Interpreter  ====> Runtime

        varName = 100;

        let varName;


Compiled Programming Language: Java, C#, C++, TypeScript

        Statically Typed

        Compiler  ====> Compile Time

        int varName;

Promise: Future Value/Error (50/50)
    represents a value that will available either now, or in the future, or never


Task01:
    Makes a promise to return the value
    Step1
    Step2
    Step3
    Step4
    Returns the promised Value


Task02
    Step1
    Step2
    Step3 (Needs the value of task01 is returning) ==> awaits for the promised value
    Step4


Task03
    Step1
    Step2 (Needs the value of task01 is returning) ==> awaits for the promised value
    Step3
    Step4


Task04
    Step1
    Step2
    Step3
    Step4 (Needs the value of task01 is returning) ==> awaits for the promised value



=====================================================

Word Break Problem
Given an input string and a dictionary of words, find out if the input string can be segmented
into a space-separated sequence of dictionary words. See following examples for more details.
This is a famous Google interview question, also being asked by many other companies now a days.
Consider the following dictionary
	{ i, like, sam, sung, samsung, mobile, ice, cream, icecream, man, go, mango}
	Input:  ilike
	Output: Yes
	The string can be segmented as "i like".

	Input:  ilikesamsung
	Output: Yes
	The string can be segmented as "i like samsung" or "i like sam sung".




Create a function that can Count of substrings having all distinct characters
        Given a string str consisting of lowercase alphabets, the task is to find the number of possible substrings (not necessarily distinct) that consists of distinct characters only.
            Examples:
                Input: Str = “gffg”
                Output: 6
        Explanation:
            All possible substrings from the given string are,
            ( “g“, “gf“, “gff”, “gffg”, “f“, “ff”, “ffg”, “f“, “fg“, “g” )
            Among them, the highlighted ones ( “g“, “gf“, “f“, “f“, “fg“, “g” ) consists of distinct characters only.

                Input: str = “gfg”
                Output: 5
        Explanation:
            All possible substrings from the given string are,
            ( “g“, “gf“, “gfg”, “f“, “fg“, “g” )
            Among them, the highlighted ( “g“, “gf“, “f“, “fg“, “g” ) consists of distinct characters only.


--------------------------------------
pages:
class LogInPage extends BasePage{

    constructor(){
        this.usernameInputBox = locator("//input[]")
        this.passwordInputBox = locator("//input[]")
        this.loginBttn = locator("//input[]")
    }

    enterUsername(input){
        this.username.fill(input)
    }

    enterPassword(input){
        this.password.fill(input)
    }

    clickLogInBttn(){
        this.loginBttn.click();
    }

}

tests:

test{
    let logInPage = new logInPage();
    logInPage.enterUsername();
    logInPage.enterPassword();
    logInPage.clickLogInBttn();
}


------------------------------

class BasePage{
    page

    contrsuctor(page){
        this.page = page;
    }

    locate()

    ....
}

class LogInPage extends BasePage{

}


class HomePage extends BasePage {

}

